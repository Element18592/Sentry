#pragma once
#include "stdafx.h" 

#define XSTL_SERVER_VER 0x00000001

#define XSTL_SERVER_COMMAND_ID_GET_STATUS		0x00000001
#define XSTL_SERVER_COMMAND_ID_GET_SALT			0x00000002
#define XSTL_SERVER_COMMAND_ID_UPDATE_PRESENCE  0x00000003
#define XSTL_SERVER_COMMAND_ID_TOKEN			0x00000004
#define XSTL_SERVER_COMMAND_ID_PATCH			0x00000005
#define XSTL_SERVER_COMMAND_ID_GET_CHALLENGE	0x00000006
#define XSTL_SERVER_COMMAND_ID_GET_MSG			0x00000007

#define XSTL_STATUS_SUCCESS						0x10000001
#define XSTL_STATUS_UPDATE						0x20000002
#define XSTL_STATUS_EXPIRED						0x30000003
#define XSTL_STATUS_ERROR						0x40000004
#define XSTL_STATUS_TAMPER						0x50000005
#define XSTL_STATUS_MESSAGE						0x60000006
#define XSTL_STATUS_BAD_TOK						0x70000007
#define XSTL_STATUS_BLACKLIST					0x80000008
#define XSTL_STATUS_AUTHED						0xA5000000 
#define XSTL_STATUS_AUTHED_ND					0xA5D00000 
#define XSTL_STATUS_AUTHED_ES					0xA5E00000 
#define XSTL_STATUS_LIFETIME					0xA5F00000 


typedef struct _SERVER_GET_PATCH_REQUEST {
	DWORD Game;
	BYTE CpuKey[16];
	BYTE ExecutableHash[16];
	BYTE Token[8];
} SERVER_GET_PATCH_REQUEST, *PSERVER_GET_PATCH_REQUEST;

typedef struct _SERVER_GET_PATCH_RESPONSE {
	DWORD Length;
} SERVER_GET_PATCH_RESPONSE, *PSERVER_GET_PATCH_RESPONSE;

typedef struct _SERVER_GET_TOKEN_REQUEST {
	BYTE CpuKey[16];
	char Token[36];
	DWORD Confirm;
} SERVER_GET_TOKEN_REQUEST, *PSERVER_GET_TOKEN_REQUEST;

typedef struct _SERVER_GET_TOKEN_RESPONSE {
	DWORD Days;
	BYTE padding[20];
} SERVER_GET_TOKEN_RESPONSE, *PSERVER_GET_TOKEN_RESPONSE;

typedef struct _SERVER_CHALLENGE_REQUEST {
	BYTE CpuKey[16];
	BYTE ExecutableHash[16];
	BYTE Token[8];
	BYTE Salt[16];
	BYTE shit[2];
	BYTE ECC[2];
	DWORD Crl;
	DWORD Fcrt;
	DWORD Type1Kv;
} SERVER_CHALLENGE_REQUEST, *PSERVER_CHALLENGE_REQUEST;

typedef struct _SERVER_CHALLENGE_RESPONCE {
	DWORD Status;
	BYTE padding[0x1C];
	BYTE XamBuffer[0xE0];
} SERVER_CHALLENGE_RESPONCE, *PSERVER_CHALLENGE_RESPONCE;

typedef struct _SERVER_GET_STATUS_REQUEST {
	DWORD Version;
	DWORD ConsoleType;
	DWORD TitleID;
	BYTE Gamertag[16];
	BYTE CpuKey[16];
	BYTE ExecutableHash[16];
	//BYTE KV[16384];
	BYTE Token[8];
} SERVER_GET_STATUS_REQUEST, *PSERVER_GET_STATUS_REQUEST;

typedef struct _SERVER_GET_STATUS_RESPONSE {
	DWORD Status;
	DWORD Days;
	char name[20];
	char Date[24];
	DWORD SysMsg;
	BYTE padding[20];
} SERVER_GET_STATUS_RESPONSE, *PSERVER_GET_STATUS_RESPONSE;

typedef struct _SERVER_GET_SALT_RESPONSE {
	BYTE Token[8];
	BYTE padding[20];
} SERVER_GET_SALT_RESPONSE, *PSERVER_GET_SALT_RESPONSE;

typedef struct _SERVER_GET_SALT_REQUEST {
	BYTE CpuKey[16];
} SERVER_GET_SALT_REQUEST, *PSERVER_GET_SALT_REQUEST;

typedef struct _SERVER_GET_UPD_REQUEST {
	BYTE CpuKey[16];
} SERVER_GET_UPD_REQUEST, *PSERVER_GET_UPD_REQUEST;

typedef struct _SERVER_GET_UPD_RESPONSE {
	DWORD Length;
} SERVER_GET_UPD_RESPONSE, *PSERVER_GET_UPD_RESPONSE;

typedef struct _SERVER_GET_SYSMSG_REQUEST {
	DWORD MessageID;
	BYTE CpuKey[16];
} SERVER_GET_SYSMSG_REQUEST, *PSERVER_GET_SYSMSG_REQUEST;

typedef struct _SERVER_GET_SYSMSG_RESPONSE {
	DWORD Type;
	BYTE Message[200];
	BYTE Button1[30];
	BYTE padding[20];
} SERVER_GET_SYSMSG_RESPONSE, *PSERVER_GET_SYSMSG_RESPONSE;


VOID StartupServerCommincator();
HRESULT InitCommand();
HRESULT ReceiveData(VOID* Buffer, DWORD BytesExpected, BOOL breakOnZero);
HRESULT SendCommand(DWORD CommandId, VOID* CommandData, DWORD DataLen);
HRESULT SendCommand(DWORD CommandId, VOID* CommandData, DWORD CommandLength, VOID* Responce, DWORD ResponceLength, BOOL KeepOpen = FALSE);
VOID EndCommand();
VOID ConnectionFailed();